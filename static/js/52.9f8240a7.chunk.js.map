{"version":3,"file":"static/js/52.9f8240a7.chunk.js","mappings":"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","sources":["components/ButtonWithLoader/index.js","validators/resetPasswordSchema.js","pages/ResetPassword/index.js"],"sourcesContent":["import React from \"react\";\n\nconst ButtonWithLoader = ({\n  isLoading,\n  className,\n  disabled,\n  onClick,\n  children,\n  bgColor = \"bg-customGreen\",\n  spinnerColor = \"border-white\",\n}) => {\n  return (\n    <button\n      className={`${bgColor} hover:${bgColor} text-white font-bold mt-[20px] py-2 px-4 rounded w-full flex justify-center items-center text-[22px] ${className}`}\n      disabled={isLoading || disabled}\n      onClick={onClick}\n    >\n      {isLoading ? (\n        <div className=\"flex justify-center items-center\">\n          <svg\n            className={`animate-spin h-5 w-5 border-2 ${spinnerColor} border-opacity-50 border-t-transparent rounded-full`}\n            viewBox=\"0 0 24 24\"\n          ></svg>\n        </div>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\n\nexport default ButtonWithLoader;\n","import * as yup from \"yup\";\n\nconst resetPasswordSchema = yup\n  .object({\n    password: yup\n      .string()\n      .min(6, \"Password must be at least 6 characters\")\n\n      .required(\"New password is required\"),\n    confirmPassword: yup\n      .string()\n      .oneOf([yup.ref(\"password\"), null], \"Passwords must match\")\n      .required(\"Confirm password is required\"),\n  })\n  .required();\n\nexport default resetPasswordSchema;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { ReactComponent as BackArrow } from \"../../assets/back.svg\";\nimport { ReactComponent as PasswordSvg } from \"../../assets/password.svg\";\nimport InputWithIcon from \"../../components/InputWithIcon\";\nimport resetPasswordSchema from \"../../validators/resetPasswordSchema\";\nimport { Toast } from \"../../utils/Toasts\";\nimport ButtonWithLoader from \"../../components/ButtonWithLoader\";\nimport { resetPassword } from \"../../redux/slices/authSlice\";\n\nconst ResetPassword = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const toastShownRef = useRef(false);\n  const { loading } = useSelector((state) => state.auth);\n\n  const [token, setToken] = useState(\"\");\n\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const token = queryParams.get(\"token\");\n\n    if (!token && !toastShownRef.current) {\n      Toast.error(\"Token is missing or invalid.\");\n      toastShownRef.current = true;\n      setTimeout(() => navigate(\"/forgot-password\"), 1000);\n    } else {\n      setToken(token);\n    }\n  }, [navigate, location.search]);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(resetPasswordSchema),\n  });\n\n  const onSubmit = async (data) => {\n    const updatedData = {\n      ...data,\n      token,\n    };\n    dispatch(resetPassword(updatedData)).then((response) => {\n      if (\n        response.payload.success === \"True\" ||\n        response.payload.success === true\n      ) {\n        Toast.success(response.payload.message);\n        setTimeout(() => navigate(\"/signin\"), 1500);\n      }\n    });\n  };\n\n  return (\n    <div className=\"col-span-7 lg:col-span-3  bg-black text-white flex justify-center items-center lg:items-start flex-col h-screen order-0 lg:order-1 px-3 lg:px-0\">\n      <div className=\"w-full max-w-[430px] pl-[0px] lg:ml-[40px] 2xl:ml-[140px] pr-0 md:pr-10 xl:pr-0\">\n        <div className=\"mb-8\">\n          <button className=\"mb-4\" onClick={() => navigate(-1)}>\n            <BackArrow />\n          </button>\n          <h1 className=\"text-4xl text-center lg:text-left font-extrabold mb-2\">\n            Ready to Use AI50?\n          </h1>\n          <p className=\"text-lg text-center lg:text-left \">Reset Password</p>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <InputWithIcon\n            icon={PasswordSvg}\n            placeholder=\"New Password\"\n            type=\"password\"\n            {...register(\"password\")}\n            error={errors.password?.message}\n          />\n          <InputWithIcon\n            icon={PasswordSvg}\n            placeholder=\"Confirm New Password\"\n            type=\"confirmPassword\"\n            {...register(\"confirmPassword\")}\n            error={errors.confirmPassword?.message}\n          />\n          <ButtonWithLoader isLoading={loading} disabled={loading}>\n            Reset\n          </ButtonWithLoader>\n        </form>\n        <p className=\"mt-8 text-xl\">\n          By signing up, you agree to the{\" \"}\n          <Link to=\"#\" className=\"underline\">\n            Terms of Service\n          </Link>{\" \"}\n          and{\" \"}\n          <Link to=\"#\" className=\"underline\">\n            Privacy Policy\n          </Link>\n          .\n        </p>\n\n        <p className=\"my-10 border-t border-gray-400 text-sm text-center\"></p>\n        <p className=\"text-xl font-semibold\">\n          <Link to=\"/signin\" className=\"underline text-customGreen\">\n            {\"\"}\n            Sign in{\"\"}\n          </Link>{\" \"}\n          &nbsp;If you have an account\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n"],"names":["_ref","isLoading","className","disabled","onClick","children","bgColor","spinnerColor","_jsx","concat","viewBox","yup","password","min","required","confirmPassword","oneOf","ResetPassword","_errors$password","_errors$confirmPasswo","dispatch","useDispatch","navigate","useNavigate","location","useLocation","toastShownRef","useRef","loading","useSelector","state","auth","token","setToken","useState","useEffect","URLSearchParams","search","get","current","Toast","error","setTimeout","register","handleSubmit","formState","errors","useForm","resolver","yupResolver","resetPasswordSchema","_jsxs","BackArrow","onSubmit","async","updatedData","data","resetPassword","then","response","payload","success","message","InputWithIcon","icon","PasswordSvg","placeholder","type","ButtonWithLoader","Link","to"],"sourceRoot":""}