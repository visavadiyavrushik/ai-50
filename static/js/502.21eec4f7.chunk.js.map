{"version":3,"file":"static/js/502.21eec4f7.chunk.js","mappings":"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","sources":["components/ButtonWithLoader/index.js","hooks/useAuth.js","validators/signInSchema.js","pages/SignIn/index.js"],"sourcesContent":["import React from \"react\";\n\nconst ButtonWithLoader = ({\n  isLoading,\n  className,\n  disabled,\n  onClick,\n  children,\n  bgColor = \"bg-customGreen\",\n  spinnerColor = \"border-white\",\n}) => {\n  return (\n    <button\n      className={`${bgColor} hover:${bgColor} text-white font-bold mt-[20px] py-2 px-4 rounded w-full flex justify-center items-center text-[22px] ${className}`}\n      disabled={isLoading || disabled}\n      onClick={onClick}\n    >\n      {isLoading ? (\n        <div className=\"flex justify-center items-center\">\n          <svg\n            className={`animate-spin h-5 w-5 border-2 ${spinnerColor} border-opacity-50 border-t-transparent rounded-full`}\n            viewBox=\"0 0 24 24\"\n          ></svg>\n        </div>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\n\nexport default ButtonWithLoader;\n","import { useNavigate } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\n// const getToken = () => {\n//   return localStorage.getItem(\"accessToken\");\n// };\n\nconst useAuth = () => {\n  // const navigate = useNavigate();\n  // useEffect(() => {\n  //   const token = getToken();\n  //   if (!token) {\n  //     navigate(\"/signin\");\n  //   }\n  // }, [navigate]);\n};\n\nconst useUnauth = () => {\n  // const navigate = useNavigate();\n  // useEffect(() => {\n  //   const token = getToken();\n  //   if (token) {\n  //     navigate(\"/dashboard\");\n  //   }\n  // }, [navigate]);\n};\n\nexport { useAuth, useUnauth };\n","import * as yup from \"yup\";\n\nconst signInSchema = yup\n  .object({\n    email: yup\n      .string()\n      .email(\"Enter a valid email\")\n      .required(\"Email is required\"),\n    password: yup.string().required(\"Password is required\"),\n  })\n  .required();\n\nexport default signInSchema;\n","import React from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport InputWithIcon from \"../../components/InputWithIcon\";\nimport ButtonWithLoader from \"../../components/ButtonWithLoader\";\nimport signInSchema from \"../../validators/signInSchema\";\nimport { Toast } from \"../../utils/Toasts\";\n\nimport { ReactComponent as BackArrow } from \"../../assets/back.svg\";\nimport { ReactComponent as EmailSvg } from \"../../assets/email.svg\";\nimport { ReactComponent as PasswordSvg } from \"../../assets/password.svg\";\nimport { signin } from \"../../redux/slices/authSlice\";\nimport { useUnauth } from \"../../hooks/useAuth\";\n\nconst SignIn = () => {\n  useUnauth();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { loading } = useSelector((state) => state.auth);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(signInSchema),\n  });\n\n  const onSubmit = async (data) => {\n    // dispatch(signin(data)).then((response) => {\n    //   if (\n    //     response.payload.success === \"True\" ||\n    //     response.payload.success === true\n    //   ) {\n    //     localStorage.setItem(\"accessToken\", response.payload.data.access);\n    //   }\n    // });\n    Toast.success(\"Login Successfully\");\n    navigate(\"/dashboard\");\n  };\n\n  return (\n    <div className=\"col-span-7 lg:col-span-3  bg-black text-white flex justify-center items-center lg:items-start flex-col h-screen order-0 lg:order-1 px-3 lg:px-0\">\n      <div className=\"w-full max-w-[430px] pl-[0px] lg:ml-[40px] 2xl:ml-[140px] pr-0 md:pr-10 xl:pr-0\">\n        <div className=\"mb-8\">\n          <button className=\"mb-4\" onClick={() => navigate(-1)}>\n            <BackArrow />\n          </button>\n          <h1 className=\"text-4xl text-center lg:text-left font-extrabold mb-2\">\n            Ready to Use AI50?\n          </h1>\n          <p className=\"text-lg text-center lg:text-left\">Sign In</p>\n        </div>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <InputWithIcon\n            icon={EmailSvg}\n            placeholder=\"Email Address\"\n            type=\"email\"\n            {...register(\"email\")}\n            error={errors.email?.message}\n          />\n          <InputWithIcon\n            icon={PasswordSvg}\n            placeholder=\"Password\"\n            type=\"password\"\n            {...register(\"password\")}\n            error={errors.password?.message}\n          />\n          <p className=\"text-base text-end text-customGreen  \">\n            <span\n              className=\"cursor-pointer\"\n              onClick={() => navigate(\"/forgot-password\")}\n            >\n              {\" \"}\n              Forgot Password?\n            </span>\n          </p>\n          <ButtonWithLoader isLoading={loading} disabled={loading}>\n            Sign In\n          </ButtonWithLoader>\n        </form>\n        <p className=\"mt-8 text-xl \">\n          By signing up, you agree to the{\" \"}\n          <Link to=\"#\" className=\"underline\">\n            Terms of Service\n          </Link>{\" \"}\n          and{\" \"}\n          <Link to=\"#\" className=\"underline\">\n            Privacy Policy\n          </Link>\n          .\n        </p>\n        <p className=\"my-10 border-t border-gray-400 text-sm text-center\"></p>\n        <p className=\"text-xl font-semibold text-center lg:text-left\">\n          <Link\n            to=\"/signup\"\n            className=\"underline text-customGreen text-center lg:text-left \"\n          >\n            Sign up\n          </Link>\n          &nbsp;If you donâ€™t have an account\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn;\n"],"names":["_ref","isLoading","className","disabled","onClick","children","bgColor","spinnerColor","_jsx","concat","viewBox","useUnauth","yup","email","required","password","SignIn","_errors$email","_errors$password","useDispatch","navigate","useNavigate","loading","useSelector","state","auth","register","handleSubmit","formState","errors","useForm","resolver","yupResolver","signInSchema","_jsxs","BackArrow","onSubmit","async","Toast","success","InputWithIcon","icon","EmailSvg","placeholder","type","error","message","PasswordSvg","ButtonWithLoader","Link","to"],"sourceRoot":""}