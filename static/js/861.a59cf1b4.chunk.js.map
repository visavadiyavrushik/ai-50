{"version":3,"file":"static/js/861.a59cf1b4.chunk.js","mappings":"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","sources":["components/ButtonWithLoader/index.js","../node_modules/src/index.tsx","components/CountDownTImer/index.js","pages/VerifyCode/index.js"],"sourcesContent":["import React from \"react\";\n\nconst ButtonWithLoader = ({\n  isLoading,\n  className,\n  disabled,\n  onClick,\n  children,\n  bgColor = \"bg-customGreen\",\n  spinnerColor = \"border-white\",\n}) => {\n  return (\n    <button\n      className={`${bgColor} hover:${bgColor} text-white font-bold mt-[20px] py-2 px-4 rounded w-full flex justify-center items-center text-[22px] ${className}`}\n      disabled={isLoading || disabled}\n      onClick={onClick}\n    >\n      {isLoading ? (\n        <div className=\"flex justify-center items-center\">\n          <svg\n            className={`animate-spin h-5 w-5 border-2 ${spinnerColor} border-opacity-50 border-t-transparent rounded-full`}\n            viewBox=\"0 0 24 24\"\n          ></svg>\n        </div>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\n\nexport default ButtonWithLoader;\n","import React from 'react';\n\ntype AllowedInputTypes = 'password' | 'text' | 'number' | 'tel';\n\ntype InputProps = Required<\n  Pick<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    | 'value'\n    | 'onChange'\n    | 'onFocus'\n    | 'onBlur'\n    | 'onKeyDown'\n    | 'onPaste'\n    | 'aria-label'\n    | 'autoComplete'\n    | 'style'\n    | 'inputMode'\n    | 'onInput'\n  > & {\n    ref: React.RefCallback<HTMLInputElement>;\n    placeholder: string | undefined;\n    className: string | undefined;\n    type: AllowedInputTypes;\n  }\n>;\n\ninterface OTPInputProps {\n  /** Value of the OTP input */\n  value?: string;\n  /** Number of OTP inputs to be rendered */\n  numInputs?: number;\n  /** Callback to be called when the OTP value changes */\n  onChange: (otp: string) => void;\n  /** Callback to be called when pasting content into the component */\n  onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;\n  /** Function to render the input */\n  renderInput: (inputProps: InputProps, index: number) => React.ReactNode;\n  /** Whether the first input should be auto focused */\n  shouldAutoFocus?: boolean;\n  /** Placeholder for the inputs */\n  placeholder?: string;\n  /** Function to render the separator */\n  renderSeparator?: ((index: number) => React.ReactNode) | React.ReactNode;\n  /** Style for the container */\n  containerStyle?: React.CSSProperties | string;\n  /** Style for the input */\n  inputStyle?: React.CSSProperties | string;\n  /** The type that will be passed to the input being rendered */\n  inputType?: AllowedInputTypes;\n  /** Do not apply the default styles to the inputs, will be removed in future versions */\n  skipDefaultStyles?: boolean; // TODO: Remove in next major release\n}\n\nconst isStyleObject = (obj: unknown) => typeof obj === 'object' && obj !== null;\n\nconst OTPInput = ({\n  value = '',\n  numInputs = 4,\n  onChange,\n  onPaste,\n  renderInput,\n  shouldAutoFocus = false,\n  inputType = 'text',\n  renderSeparator,\n  placeholder,\n  containerStyle,\n  inputStyle,\n  skipDefaultStyles = false,\n}: OTPInputProps) => {\n  const [activeInput, setActiveInput] = React.useState(0);\n  const inputRefs = React.useRef<Array<HTMLInputElement | null>>([]);\n\n  const getOTPValue = () => (value ? value.toString().split('') : []);\n\n  const isInputNum = inputType === 'number' || inputType === 'tel';\n\n  React.useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, numInputs);\n  }, [numInputs]);\n\n  React.useEffect(() => {\n    if (shouldAutoFocus) {\n      inputRefs.current[0]?.focus();\n    }\n  }, [shouldAutoFocus]);\n\n  const getPlaceholderValue = () => {\n    if (typeof placeholder === 'string') {\n      if (placeholder.length === numInputs) {\n        return placeholder;\n      }\n\n      if (placeholder.length > 0) {\n        console.error('Length of the placeholder should be equal to the number of inputs.');\n      }\n    }\n    return undefined;\n  };\n\n  const isInputValueValid = (value: string) => {\n    const isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n    return isTypeValid && value.trim().length === 1;\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value);\n      focusInput(activeInput + 1);\n    }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { nativeEvent } = event;\n    const value = event.target.value;\n\n    if (!isInputValueValid(value)) {\n      // Pasting from the native autofill suggestion on a mobile device can pass\n      // the pasted string as one long input to one of the cells. This ensures\n      // that we handle the full input and not just the first character.\n      if (value.length === numInputs) {\n        const hasInvalidInput = value.split('').some((cellInput) => !isInputValueValid(cellInput));\n        if (!hasInvalidInput) {\n          handleOTPChange(value.split(''));\n          focusInput(numInputs - 1);\n        }\n      }\n\n      // @ts-expect-error - This was added previously to handle and edge case\n      // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n      // still needed.\n      if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n        event.preventDefault();\n        changeCodeAtFocus('');\n        focusInput(activeInput - 1);\n      }\n\n      // Clear the input if it's not valid value because firefox allows\n      // pasting non-numeric characters in a number type input\n      event.target.value = '';\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => (index: number) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  const handleBlur = () => {\n    setActiveInput(activeInput - 1);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const otp = getOTPValue();\n    if ([event.code, event.key].includes('Backspace')) {\n      event.preventDefault();\n      changeCodeAtFocus('');\n      focusInput(activeInput - 1);\n    } else if (event.code === 'Delete') {\n      event.preventDefault();\n      changeCodeAtFocus('');\n    } else if (event.code === 'ArrowLeft') {\n      event.preventDefault();\n      focusInput(activeInput - 1);\n    } else if (event.code === 'ArrowRight') {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    } else if (\n      event.code === 'Spacebar' ||\n      event.code === 'Space' ||\n      event.code === 'ArrowUp' ||\n      event.code === 'ArrowDown'\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  const focusInput = (index: number) => {\n    const activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n\n    if (inputRefs.current[activeInput]) {\n      inputRefs.current[activeInput]?.focus();\n      inputRefs.current[activeInput]?.select();\n      setActiveInput(activeInput);\n    }\n  };\n\n  const changeCodeAtFocus = (value: string) => {\n    const otp = getOTPValue();\n    otp[activeInput] = value[0];\n    handleOTPChange(otp);\n  };\n\n  const handleOTPChange = (otp: Array<string>) => {\n    const otpValue = otp.join('');\n    onChange(otpValue);\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    const otp = getOTPValue();\n    let nextActiveInput = activeInput;\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const pastedData = event.clipboardData\n      .getData('text/plain')\n      .slice(0, numInputs - activeInput)\n      .split('');\n\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some((value) => isNaN(Number(value)))) {\n      return;\n    }\n\n    // Paste data from focused input onwards\n    for (let pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = pastedData.shift() ?? '';\n        nextActiveInput++;\n      }\n    }\n\n    focusInput(nextActiveInput);\n    handleOTPChange(otp);\n  };\n\n  return (\n    <div\n      style={Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle)}\n      className={typeof containerStyle === 'string' ? containerStyle : undefined}\n      onPaste={onPaste}\n    >\n      {Array.from({ length: numInputs }, (_, index) => index).map((index) => (\n        <React.Fragment key={index}>\n          {renderInput(\n            {\n              value: getOTPValue()[index] ?? '',\n              placeholder: getPlaceholderValue()?.[index] ?? undefined,\n              ref: (element) => (inputRefs.current[index] = element),\n              onChange: handleChange,\n              onFocus: (event) => handleFocus(event)(index),\n              onBlur: handleBlur,\n              onKeyDown: handleKeyDown,\n              onPaste: handlePaste,\n              autoComplete: 'off',\n              'aria-label': `Please enter OTP character ${index + 1}`,\n              style: Object.assign(\n                !skipDefaultStyles ? ({ width: '1em', textAlign: 'center' } as const) : {},\n                isStyleObject(inputStyle) ? inputStyle : {}\n              ),\n              className: typeof inputStyle === 'string' ? inputStyle : undefined,\n              type: inputType,\n              inputMode: isInputNum ? 'numeric' : 'text',\n              onInput: handleInputChange,\n            },\n            index\n          )}\n          {index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport type { OTPInputProps, InputProps, AllowedInputTypes };\nexport default OTPInput;\n","import React from \"react\";\n// import { useCountdown, formatTime } from \"../../hooks/useCount\";\n\nconst CountDownTimer = ({ expires, onResend }) => {\n  // const timeLeft = useCountdown(expires);\n\n  // return (\n  //   <div className=\"mt-[20px] text-xl\">\n  //     {timeLeft > 0 ? (\n  //       <p>Did't get the code ? {formatTime(timeLeft)}</p>\n  //     ) : (\n  //       <p>\n  //         Didn't get the code?{\" \"}\n  //         <span\n  //           className=\"cursor-pointer text-customGreen hover:text-customGreen\"\n  //           onClick={onResend}\n  //         >\n  //           Resend\n  //         </span>\n  //       </p>\n  //     )}\n  //   </div>\n  // );\n\n  return (\n    <div className=\"mt-[20px] text-xl\">\n      <p>\n        Didn't get the code?{\" \"}\n        <span\n          className=\"cursor-pointer text-customGreen hover:text-customGreen\"\n          onClick={onResend}\n        >\n          Resend\n        </span>\n      </p>\n    </div>\n  );\n};\n\nexport default CountDownTimer;\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport OTPInput from \"react-otp-input\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { ReactComponent as BackArrow } from \"../../assets/back.svg\";\nimport { Toast } from \"../../utils/Toasts\";\nimport ButtonWithLoader from \"../../components/ButtonWithLoader\";\nimport CountDownTimer from \"../../components/CountDownTImer\";\nimport { sendOtp, signup, verifyOtp } from \"../../redux/slices/authSlice\";\n\nconst VerifyCode = () => {\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { loading } = useSelector((state) => state.auth);\n\n  const [OTP, setOTP] = useState(\"\");\n  const [expiryTime, setExpiryTime] = useState(location.state?.expires || 0);\n\n  // useEffect(() => {\n  //   if (!location.state || !location.state.data || !location.state?.expires) {\n  //     navigate(\"/signup\");\n  //   }\n  // }, [location.state, navigate]);\n\n  // if (!location.state || !location.state.data || !location.state?.expires) {\n  //   return null;\n  // }\n\n  function handleChange(OTP) {\n    setOTP(OTP);\n  }\n\n  const validateOtp = (otp) => {\n    return /^\\d{6}$/.test(otp);\n  };\n\n  const handleResendCode = async () => {\n    // dispatch(\n    //   sendOtp({\n    //     email: location.state.data.email,\n    //   })\n    // ).then((response) => {\n    //   if (\n    //     response.payload.success === \"True\" ||\n    //     response.payload.success === true\n    //   ) {\n    //     Toast.success(response.payload.message);\n    //     setExpiryTime(response.payload.data[0].expires);\n    //   }\n    // });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setTimeout(() => {\n      Toast.success(\"Otp verified Successfully.\");\n      navigate(\"/signin\");\n    }, 500);\n\n    // if (!validateOtp(OTP)) {\n    //   Toast.error(\"Invalid Code format. Please enter a 6-digit Code.\");\n    //   return;\n    // }\n\n    // dispatch(\n    //   verifyOtp({\n    //     otp: OTP,\n    //     email: location.state.data.email,\n    //   })\n    // ).then((response) => {\n    //   if (\n    //     response.payload.success === \"True\" ||\n    //     response.payload.success === true\n    //   ) {\n    //     dispatch(signup(location.state.data)).then((signupResponse) => {\n    //       if (\n    //         response.payload.success === \"True\" ||\n    //         response.payload.success === true\n    //       ) {\n    //         Toast.success(signupResponse.payload.message);\n    //         navigate(\"/signin\");\n    //       }\n    //     });\n    //   }\n    // });\n  };\n\n  return (\n    <div className=\"col-span-7 lg:col-span-3  bg-black text-white flex justify-center items-center lg:items-start flex-col h-screen order-0 lg:order-1 px-3 lg:px-0\">\n      <div className=\"w-full max-w-[430px] pl-[0px] lg:ml-[40px] 2xl:ml-[140px] pr-0 md:pr-10 xl:pr-0\">\n        <div className=\"mb-8 \">\n          <button className=\"mb-4\" onClick={() => navigate(-1)}>\n            <BackArrow />\n          </button>\n          <h1 className=\"text-4xl text-center lg:text-left font-extrabold mb-2\">\n            Ready to Use AI50?\n          </h1>\n          <p className=\"text-lg text-center lg:text-left \">\n            Verify your Email Address, Enter Code\n          </p>\n        </div>\n        <form onSubmit={handleSubmit} className=\"text-center\">\n          <OTPInput\n            className=\"p-2 bg-transparent\"\n            value={OTP}\n            onChange={handleChange}\n            numInputs={6}\n            inputStyle={\n              {\n                // background: \"transparent\",\n                // padding: \"10px\",\n                // color: \"#fff\",\n              }\n            }\n            skipDefaultStyles\n            renderSeparator={<span className=\"mr-2\"> </span>}\n            renderInput={(props) => (\n              <input\n                {...props}\n                className=\"p-4 border bg-transparent border-[#312E36] rounded-lg focus:outline-none w-full focus:border-customGreen text-center\"\n              />\n            )}\n          />\n\n          <ButtonWithLoader\n            isLoading={loading}\n            disabled={loading || !OTP || OTP.length < 6}\n          >\n            Verify\n          </ButtonWithLoader>\n          <CountDownTimer expires={expiryTime} onResend={handleResendCode} />\n        </form>\n        <p className=\"mt-12 text-lg \">\n          By signing up, you agree to the{\" \"}\n          <Link to=\"#\" className=\"underline\">\n            Terms of Service\n          </Link>{\" \"}\n          and{\" \"}\n          <Link to=\"#\" className=\"underline\">\n            Privacy Policy\n          </Link>\n          .\n        </p>\n\n        <p className=\"my-10 border-t border-gray-400 text-sm text-center\"></p>\n        <p className=\"text-xl font-semibold text-center lg:text-left\">\n          <Link\n            to=\"/signup\"\n            className=\"underline text-customGreen text-center lg:text-left \"\n          >\n            {\"\"}\n            Sign up{\"\"}\n          </Link>{\" \"}\n          &nbsp;If you don’t have an account\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default VerifyCode;\n"],"names":["_ref","isLoading","className","disabled","onClick","children","bgColor","spinnerColor","_jsx","concat","viewBox","isStyleObject","obj","OTPInput","_a","_b","value","_c","numInputs","onChange","onPaste","renderInput","_d","shouldAutoFocus","_e","inputType","renderSeparator","placeholder","containerStyle","inputStyle","_f","skipDefaultStyles","_g","React","activeInput","setActiveInput","inputRefs","getOTPValue","toString","split","isInputNum","current","slice","focus","getPlaceholderValue","length","console","error","isInputValueValid","isNaN","Number","trim","handleChange","event","target","changeCodeAtFocus","focusInput","handleInputChange","nativeEvent","some","cellInput","handleOTPChange","data","preventDefault","handleBlur","handleKeyDown","otp","code","key","includes","index","Math","max","min","select","otpValue","join","handlePaste","nextActiveInput","pastedData","clipboardData","getData","pos","shift","style","Object","assign","display","alignItems","undefined","Array","from","_","map","ref","element","onFocus","handleFocus","onBlur","onKeyDown","autoComplete","width","textAlign","type","inputMode","onInput","expires","onResend","_jsxs","VerifyCode","_location$state","useDispatch","navigate","useNavigate","location","useLocation","loading","useSelector","state","auth","OTP","setOTP","useState","expiryTime","setExpiryTime","BackArrow","onSubmit","async","e","setTimeout","Toast","success","props","ButtonWithLoader","CountDownTimer","Link","to"],"sourceRoot":""}