{"version":3,"file":"static/js/28.4ff373a5.chunk.js","mappings":"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","sources":["hooks/useAuth.js","components/SendChatForm/index.js","components/ChatDefaultQuestion/index.js","helpers/dateHelper.js","components/DataLoader/index.js","components/chip/index.js","components/ChatMessage/index.js","pages/Dashboard/index.js"],"sourcesContent":["import { useNavigate } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\n// const getToken = () => {\n//   return localStorage.getItem(\"accessToken\");\n// };\n\nconst useAuth = () => {\n  // const navigate = useNavigate();\n  // useEffect(() => {\n  //   const token = getToken();\n  //   if (!token) {\n  //     navigate(\"/signin\");\n  //   }\n  // }, [navigate]);\n};\n\nconst useUnauth = () => {\n  // const navigate = useNavigate();\n  // useEffect(() => {\n  //   const token = getToken();\n  //   if (token) {\n  //     navigate(\"/dashboard\");\n  //   }\n  // }, [navigate]);\n};\n\nexport { useAuth, useUnauth };\n","import React, { useState } from \"react\";\nimport { PaperClipIcon, SendIcon } from \"../../assets\";\n\nconst SendChatForm = ({ isRunning, onSubmit }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim()) {\n      console.log(\"Input value\", inputValue);\n      onSubmit(inputValue);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"chat-input bg-customGray\">\n      <div>\n        {isRunning ? (\n          <p className=\"text-[#B4B4B4] font-normal text-xl\">\n            Running... <span className=\"text-customGreen\">Stop</span>{\" \"}\n          </p>\n        ) : (\n          \"\"\n        )}\n      </div>\n      <div className=\"flex items-center \">\n        <div className=\"relative inputWithIcon w-full mr-5\">\n          <span className=\"absolute inset-y-0 left-0 flex items-center pl-2\">\n            <PaperClipIcon />\n          </span>\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            className=\"pl-10 p-4 border bg-white text-2xl rounded-lg focus:outline-none w-full focus:border-customGreen\"\n            placeholder=\"Enter a Prompt Here...\"\n          />\n        </div>\n        <button\n          type=\"submit\"\n          className={`rounded-2xl p-3 ${\n            !inputValue || isRunning ? \"bg-gray-400\" : \"bg-customGreen\"\n          }`}\n          disabled={!inputValue || isRunning}\n        >\n          <SendIcon />\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default SendChatForm;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { ChatBrandLogo } from \"../../assets\";\nimport {\n  addChatToHistory,\n  addMessageToChatHistory,\n  questionsList,\n  setSelectedChatHistory,\n  updateMessageAnswerInChatHistory,\n} from \"../../redux/slices/chatSlice\";\nimport { initiateChat } from \"../../redux/slices/chatSlice\";\n\nimport SendChatForm from \"../SendChatForm\";\n\nconst related_questions = [\n  \"What are the eligibility requirements for 2024 Medicare, and how do I or my clients enroll?\",\n  \"What does 2024 Medicare cover, and what are the differences between Part A, Part B, Part C, and Part D?\",\n  \"⁠How much does Medicare cost? What are the premiums, deductibles, and out-of-pocket expenses for different parts of Medicare for 2024?\",\n];\n\nconst ChatDefaultQuestion = () => {\n  const [isRunning, setIsRunning] = useState(false);\n\n  const dispatch = useDispatch();\n  const { userDetails } = useSelector((state) => state.auth);\n\n  const questions = useSelector((state) => state.chat.questionsList);\n\n  useEffect(() => {\n    if (questions.length === 0) {\n      dispatch(questionsList());\n    }\n  }, [dispatch, questions.length]);\n\n  const listQuestions = questions?.map((item) => {\n    const words = item.split(\" \");\n    const title = words.slice(0, 3).join(\" \");\n    const description = words.slice(3).join(\" \");\n    return { title, description };\n  });\n\n  const onSubmit = async (inputValue) => {\n    setIsRunning(true);\n    // const chat_uid = uuidv4();\n    // const message_uid = uuidv4();\n\n    // await dispatch(\n    //   addChatToHistory({\n    //     id: chat_uid,\n    //     chat_uid: chat_uid,\n    //     user_id: userDetails.id,\n    //     title: inputValue,\n    //     created_at: new Date().toISOString(),\n    //     updated_at: new Date().toISOString(),\n    //     is_pinned: false,\n    //     is_archived: false,\n    //     messages: [],\n    //   })\n    // );\n\n    // const addNewMessage = {\n    //   id: message_uid,\n    //   chat_id: chat_uid,\n    //   message_uid: message_uid,\n    //   user_id: userDetails.id,\n    //   question: inputValue,\n    //   answer: \"\",\n    //   related_questions: [],\n    //   created_at: new Date().toISOString(),\n    //   updated_at: new Date().toISOString(),\n    //   loading: true,\n    // };\n\n    // await dispatch(\n    //   addMessageToChatHistory({\n    //     chatId: chat_uid,\n    //     message: addNewMessage,\n    //   })\n    // );\n\n    // await dispatch(\n    //   setSelectedChatHistory({\n    //     id: chat_uid,\n    //     chat_uid: chat_uid,\n    //     user_id: userDetails.id,\n    //     title: inputValue,\n    //     created_at: new Date().toISOString(),\n    //     updated_at: new Date().toISOString(),\n    //     is_pinned: false,\n    //     is_archived: false,\n    //     messages: [],\n    //   })\n    // );\n\n    // dispatch(initiateChat({ prompt: inputValue, chat_uid, message_uid })).then(\n    //   async (response) => {\n    //     setIsRunning(false);\n\n    //     if (\n    //       response.payload.success === \"True\" ||\n    //       response.payload.success === true\n    //     ) {\n    //       await dispatch(\n    //         updateMessageAnswerInChatHistory({\n    //           newConversation: true,\n    //           chat_uid: chat_uid,\n    //           chatId: response.payload.data.chat_id,\n    //           message_uid: message_uid,\n    //           answer: response.payload.data.answer,\n    //           related_questions: response.payload.data.related_questions,\n    //         })\n    //       );\n\n    //       await dispatch(\n    //         setSelectedChatHistory({\n    //           id: response.payload.data.chat_id,\n    //           chat_uid: chat_uid,\n    //           user_id: userDetails.id,\n    //           title: inputValue,\n    //           created_at: new Date().toISOString(),\n    //           updated_at: new Date().toISOString(),\n    //           is_pinned: false,\n    //           is_archived: false,\n    //           messages: [],\n    //         })\n    //       );\n    //     }\n    //   }\n    // );\n  };\n\n  const onQuestionSubmit = async (question) => {\n    const chat_uid = uuidv4();\n    const message_uid = uuidv4();\n    setIsRunning(true);\n\n    // await dispatch(\n    //   addChatToHistory({\n    //     id: chat_uid,\n    //     chat_uid: chat_uid,\n    //     user_id: userDetails.id,\n    //     title: question,\n    //     created_at: new Date().toISOString(),\n    //     updated_at: new Date().toISOString(),\n    //     is_pinned: false,\n    //     is_archived: false,\n    //     messages: [],\n    //   })\n    // );\n\n    // const addNewMessage = {\n    //   id: message_uid,\n    //   chat_id: chat_uid,\n    //   message_uid: message_uid,\n    //   user_id: userDetails.id,\n    //   question: question,\n    //   answer: \"\",\n    //   related_questions: [],\n    //   created_at: new Date().toISOString(),\n    //   updated_at: new Date().toISOString(),\n    //   loading: true,\n    // };\n\n    // await dispatch(\n    //   addMessageToChatHistory({\n    //     chatId: chat_uid,\n    //     message: addNewMessage,\n    //   })\n    // );\n\n    // await dispatch(\n    //   setSelectedChatHistory({\n    //     id: chat_uid,\n    //     chat_uid: chat_uid,\n    //     user_id: userDetails.id,\n    //     title: question,\n    //     created_at: new Date().toISOString(),\n    //     updated_at: new Date().toISOString(),\n    //     is_pinned: false,\n    //     is_archived: false,\n    //     messages: [],\n    //   })\n    // );\n\n    // dispatch(initiateChat({ prompt: question, chat_uid, message_uid })).then(\n    //   async (response) => {\n    //     setIsRunning(false);\n\n    //     if (\n    //       response.payload.success === \"True\" ||\n    //       response.payload.success === true\n    //     ) {\n    //       await dispatch(\n    //         updateMessageAnswerInChatHistory({\n    //           newConversation: true,\n    //           chat_uid: chat_uid,\n    //           chatId: response.payload.data.chat_id,\n    //           message_uid: message_uid,\n    //           answer: response.payload.data.answer,\n    //           related_questions: response.payload.data.related_questions,\n    //         })\n    //       );\n    //       await dispatch(\n    //         setSelectedChatHistory({\n    //           id: response.payload.data.chat_id,\n    //           chat_uid: chat_uid,\n    //           user_id: userDetails.id,\n    //           title: question,\n    //           created_at: new Date().toISOString(),\n    //           updated_at: new Date().toISOString(),\n    //           is_pinned: false,\n    //           is_archived: false,\n    //           messages: [],\n    //         })\n    //       );\n    //     }\n    //   }\n    // );\n  };\n\n  const onTopicSubmit = async (question) => {\n    // const chat_uid = uuidv4();\n    // const message_uid = uuidv4();\n    setIsRunning(true);\n\n    // await dispatch(\n    //   addChatToHistory({\n    //     id: chat_uid,\n    //     chat_uid: chat_uid,\n    //     user_id: userDetails.id,\n    //     title: question,\n    //     created_at: new Date().toISOString(),\n    //     updated_at: new Date().toISOString(),\n    //     is_pinned: false,\n    //     is_archived: false,\n    //     messages: [],\n    //   })\n    // );\n\n    // const addNewMessage = {\n    //   id: message_uid,\n    //   chat_id: chat_uid,\n    //   message_uid: message_uid,\n    //   user_id: userDetails.id,\n    //   question: question,\n    //   answer: \"\",\n    //   related_questions: [],\n    //   created_at: new Date().toISOString(),\n    //   updated_at: new Date().toISOString(),\n    //   loading: true,\n    // };\n\n    // await dispatch(\n    //   addMessageToChatHistory({\n    //     chatId: chat_uid,\n    //     message: addNewMessage,\n    //   })\n    // );\n\n    // await dispatch(\n    //   setSelectedChatHistory({\n    //     id: chat_uid,\n    //     chat_uid: chat_uid,\n    //     user_id: userDetails.id,\n    //     title: question,\n    //     created_at: new Date().toISOString(),\n    //     updated_at: new Date().toISOString(),\n    //     is_pinned: false,\n    //     is_archived: false,\n    //     messages: [],\n    //   })\n    // );\n\n    // dispatch(\n    //   initiateChat({\n    //     type: \"personalized\",\n    //     prompt: question,\n    //     chat_uid,\n    //     message_uid,\n    //   })\n    // ).then(async (response) => {\n    //   setIsRunning(false);\n\n    //   if (\n    //     response.payload.success === \"True\" ||\n    //     response.payload.success === true\n    //   ) {\n    //     await dispatch(\n    //       updateMessageAnswerInChatHistory({\n    //         newConversation: true,\n    //         chat_uid: chat_uid,\n    //         chatId: response.payload.data.chat_id,\n    //         message_uid: message_uid,\n    //         answer: response.payload.data.answer,\n    //         related_questions: response.payload.data.related_questions,\n    //       })\n    //     );\n    //     await dispatch(\n    //       setSelectedChatHistory({\n    //         id: response.payload.data.chat_id,\n    //         chat_uid: chat_uid,\n    //         user_id: userDetails.id,\n    //         title: question,\n    //         created_at: new Date().toISOString(),\n    //         updated_at: new Date().toISOString(),\n    //         is_pinned: false,\n    //         is_archived: false,\n    //         messages: [],\n    //       })\n    //     );\n    //   }\n    // });\n  };\n\n  return (\n    <div className=\"w-full px-4 xl:px-0 md:max-w=[800px] xl:max-w-[900px] 2xl:max-w-[1220px] m-auto h-full relative\">\n      <div className=\"flex flex-col h-full w-full  \">\n        <div className=\" h-full\">\n          {/* Logo  */}\n          <div className=\"flex flex-col items-center mb-6 pt-[75px] pb-[60px]\">\n            <ChatBrandLogo className=\"my-6\" />\n            <h1 className=\"text-3xl font-semibold\">\n              {userDetails?.full_name ? `${userDetails?.full_name} ,` : \"\"} How\n              Can I Help You Today?\n            </h1>\n          </div>\n          {/*  */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2  gap-4\">\n            {listQuestions?.map((info, i) => (\n              <div\n                className=\"col-span-1 cursor-pointer\"\n                key={i}\n                onClick={() =>\n                  onTopicSubmit(info.title + \" \" + info.description)\n                }\n              >\n                <div className=\"bg-white rounded-xl border border-[#ccc] p-4\">\n                  <p className=\"text-xl font-semibold m-0\">{info?.title}</p>\n                  <span className=\"text-xl font-normal opacity-[0.7] mt-2\">\n                    {info?.description}\n                  </span>\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className=\"mt-5\">\n            <div className=\"bg-white rounded-xl border border-[#ccc] p-4\">\n              <h2 className=\"text-xl font-semibold mb-4\">Related Questions </h2>\n              {related_questions.map((question, i) => (\n                <div className=\"mt-2\" key={i}>\n                  <div className=\"border border-[#ddd] p-3 rounded-lg\">\n                    <button\n                      className=\"flex justify-between w-full px-2 rounded-lg text-lg\"\n                      onClick={() => onQuestionSubmit(question)}\n                    >\n                      <span className=\"text-xl font-medium text-left\">\n                        {question}\n                      </span>\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n        <SendChatForm isRunning={isRunning} onSubmit={onSubmit} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatDefaultQuestion;\n","const formatDate = (dateString) => {\n  const date = new Date(dateString);\n\n  const isToday = new Date().toDateString() === date.toDateString();\n\n  const timeOptions = { hour: \"2-digit\", minute: \"2-digit\" };\n  const dayMonthOptions = { day: \"numeric\", month: \"short\" };\n\n  const timePart = new Intl.DateTimeFormat(\"en-US\", timeOptions).format(date);\n  const dayMonthPart = new Intl.DateTimeFormat(\"en-US\", dayMonthOptions).format(\n    date\n  );\n\n  return isToday ? `${timePart}` : `${dayMonthPart}`;\n};\n\nexport { formatDate };\n","const DataLoader = () => {\n  return (\n    <div className=\"flex justify-center items-center\">\n      <div className=\"spinner border-t-transparent border-4 border-solid border-primary rounded-full w-6 h-6 animate-spin\"></div>\n    </div>\n  );\n};\n\nexport default DataLoader;\n","import React from \"react\";\nimport { CloseIcon } from \"../../assets\";\n\nconst Data = [\n  \"Not factually correct\",\n  \"Don't like the style\",\n  \"Didn't fully follow instructions\",\n  \"Refused when it shouldn't have\",\n  \"Being lazy\",\n  \"Not factually correct\",\n  \"Don't like the style\",\n  \"Didn't fully follow instructions\",\n  \"Refused when it shouldn't have\",\n  \"Being lazy\",\n  \"More..\",\n];\n\nconst TellUsMore = ({ setTellUsMore }) => {\n  return (\n    <div className=\"card py-5 px-4 my-12\">\n      <div className=\"flex items-center justify-between w-full mb-2.5\">\n        <h1 className=\"text-xl font-medium\">Tell us more:</h1>\n        <button onClick={() => setTellUsMore(false)}>\n          <CloseIcon />\n        </button>\n      </div>\n      <div className=\"flex flex-wrap\">\n        {Data?.map((r, i) => (\n          <div\n            className=\"chip m-2.5 \"\n            key={i}\n            onClick={() => console.log(\"click\")}\n          >\n            <span>{r}</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TellUsMore;\n","import React, { useEffect, useState } from \"react\";\nimport Markdown from \"react-markdown\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Avtar, Clipboard, Retry, ThumbDown, ThumbUp } from \"../../assets\";\n\nimport { formatDate } from \"../../helpers/dateHelper\";\nimport {\n  addMessageToChatHistory,\n  messageList,\n  updateChat,\n  updateMessageAnswerInChatHistory,\n} from \"../../redux/slices/chatSlice\";\nimport DataLoader from \"../DataLoader\";\nimport SendChatForm from \"../SendChatForm\";\nimport TellUsMore from \"../chip\";\n// import { light } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n\nconst ChatMessage = () => {\n  const [isRunning, setIsRunning] = useState(false);\n  const [tellUsMore, setTellUsMore] = useState(true);\n\n  const dispatch = useDispatch();\n  const selectedChatHistory = useSelector(\n    (state) => state.chat.selectedChatHistory\n  );\n\n  const chatHistory = useSelector((state) => state.chat.chatHistory);\n  console.log(\"chatHistory: \", chatHistory);\n\n  const { userDetails } = useSelector((state) => state.auth);\n\n  console.log(\"selectedChatHistory: \", selectedChatHistory);\n  useEffect(() => {\n    const selectedChat = chatHistory.find(\n      (chat) => chat.id === selectedChatHistory?.id\n    );\n    console.log(\"selectedChat: \", selectedChat);\n\n    if (\n      selectedChat &&\n      (!selectedChat.messages || selectedChat.messages.length === 0)\n    ) {\n      // dispatch(messageList({ chatId: selectedChatHistory.id }));\n    }\n  }, [dispatch, selectedChatHistory, chatHistory]);\n\n  // const selectedChat = chatHistory.find(\n  //   (chat) => chat.id === selectedChatHistory?.id\n  // );\n  // const messagess = selectedChat?.messages || [];\n  // console.log(\"messages: \", messages);\n\n  const onSubmit = async (inputValue) => {\n    // setIsRunning(true);\n    // const message_uid = uuidv4();\n    // const previousMessage = messages[messages.length - 1];\n    // const addNewMessage = {\n    //   id: message_uid,\n    //   chat_id: selectedChatHistory.id,\n    //   message_uid: message_uid,\n    //   user_id: userDetails.id,\n    //   question: inputValue,\n    //   answer: \"\",\n    //   related_questions: [],\n    //   created_at: new Date().toISOString(),\n    //   updated_at: new Date().toISOString(),\n    //   loading: true,\n    // };\n    // dispatch(\n    //   addMessageToChatHistory({\n    //     chatId: selectedChatHistory.id,\n    //     message: addNewMessage,\n    //   })\n    // );\n    // await dispatch(\n    //   updateChat({\n    //     chatId: selectedChatHistory.id,\n    //     message_uid: message_uid,\n    //     prompt: inputValue,\n    //     question: previousMessage.question,\n    //     answer: previousMessage.answer,\n    //   })\n    // ).then(async (response) => {\n    //   setIsRunning(false);\n    //   if (\n    //     response.payload.success === \"True\" ||\n    //     response.payload.success === true\n    //   ) {\n    //     await dispatch(\n    //       updateMessageAnswerInChatHistory({\n    //         newConversation: false,\n    //         chat_uid: null,\n    //         chatId: selectedChatHistory.id,\n    //         message_uid: message_uid,\n    //         answer: response.payload.data.answer,\n    //         related_questions: response.payload.data.related_questions,\n    //       })\n    //     );\n    //   }\n    // });\n  };\n\n  const messages = [\n    {\n      id: 1,\n      created_at: new Date(),\n      question: \"What is Lorem Ipsum?\",\n      answer:\n        \"Lorem Ipsum is simply dummy text of the printing and typesetting industry.\",\n    },\n    {\n      id: 2,\n      created_at: new Date(),\n      question: \"What is Markdown?\",\n      answer: `Markdown is a lightweight markup language for creating formatted text using a plain-text editor. \n               Here is an example:\n               \\n# Heading 1\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. \n               \\n## Heading 2\\n\\n1. First item\\n2. Second item\\n3. Third item\n               \\n### Heading 3\\n\\n**Bold text** and *italic text*.\n               \\n> Blockquote: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n               \\n### Code Block\\n\\n\\`\\`\\`python\\n def hello_world():\\n     print(\"Hello, world!\")\\n\\`\\`\\`\n               \\n### Unordered List\\n\\n- Item 1\\n- Item 2\\n- Item 3 \\n\\n\\n`,\n    },\n  ];\n\n  return (\n    <div className=\"w-full px-4 xl:px-0 md:max-w=[800px] xl:max-w-[900px] 2xl:max-w-[1220px] m-auto h-full relative\">\n      <div className=\"flex flex-col h-full w-full  \">\n        <div className=\" h-full pt-10\">\n          {messages &&\n            messages.map((message) => (\n              <React.Fragment key={message.id}>\n                <div className=\"mt-[40px]\">\n                  <div className=\"media\">\n                    <img src={Avtar} alt=\"avtar\" />\n                    <div className=\"media-content\">\n                      <div className=\"author\">\n                        {userDetails ? userDetails.full_name : \"You\"}\n                        <span className=\"posted-time\">\n                          {formatDate(message.created_at)}\n                        </span>\n                      </div>\n                      <div className=\"authorchat\">\n                        <p style={{ marginTop: \"0px\", marginBottom: \"0px\" }}>\n                          {message.question}{\" \"}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"chat-bot mt-5\">\n                  <div className=\"media\">\n                    <img src={Avtar} alt=\"avtar\" />\n                    <div className=\"media-content\">\n                      <div className=\"author text-xl\">\n                        AI 50\n                        <span className=\"posted-time\">\n                          {formatDate(message.created_at)}\n                        </span>\n                      </div>\n                      <div className=\"authorchat markDown\">\n                        {message.loading ? (\n                          <div className=\"text-center\">\n                            <DataLoader />\n                          </div>\n                        ) : (\n                          <Markdown\n                            children={message.answer}\n                            components={{\n                              code(props) {\n                                const { children, className, node, ...rest } =\n                                  props;\n                                const match = /language-(\\w+)/.exec(\n                                  className || \"\"\n                                );\n                                return match ? (\n                                  <SyntaxHighlighter\n                                    {...rest}\n                                    PreTag=\"div\"\n                                    children={String(children).replace(\n                                      /\\n$/,\n                                      \"\"\n                                    )}\n                                    language={match[1]}\n                                    // style={light}\n                                  />\n                                ) : (\n                                  <code {...rest} className={className}>\n                                    {children}\n                                  </code>\n                                );\n                              },\n                            }}\n                          />\n                        )}{\" \"}\n                      </div>\n                      <div className=\"flex pb-4\">\n                        <button className=\"mr-2.5\">\n                          <ThumbUp />\n                        </button>\n                        <button className=\"mr-2.5\">\n                          <ThumbDown />\n                        </button>\n                        <button className=\"mr-2.5\">\n                          <Clipboard />\n                        </button>\n                        <button className=\"mr-2\">\n                          <Retry />\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {message &&\n                message?.related_questions &&\n                message.related_questions.length > 0 ? (\n                  <div className=\"mt-5\">\n                    <h2 className=\"text-2xl font-semibold mb-4\">\n                      Related Questions{\" \"}\n                    </h2>\n                    {message.related_questions.map((question, i) => (\n                      <div className=\"mt-2\" key={i}>\n                        <div className=\"border border-[#ddd] p-3 rounded-lg\">\n                          <button\n                            className=\"flex justify-between w-full hover:bg-gray-100 px-2 rounded-lg text-lg\"\n                            onClick={() => console.log(question)}\n                          >\n                            <span className=\"text-2xl font-medium text-left\">\n                              {question}\n                            </span>\n                          </button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : null}\n              </React.Fragment>\n            ))}\n\n          {tellUsMore && (\n            <TellUsMore tellUsMore={tellUsMore} setTellUsMore={setTellUsMore} />\n          )}\n        </div>\n        <SendChatForm isRunning={isRunning} onSubmit={onSubmit} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatMessage;\n","import React from \"react\";\n\nimport { useAuth } from \"../../hooks/useAuth\";\nimport ChatDefaultQuestion from \"../../components/ChatDefaultQuestion\";\nimport { useSelector } from \"react-redux\";\nimport ChatMessage from \"../../components/ChatMessage\";\n\nconst Dashboard = () => {\n  // useAuth();\n  const selectedChatHistory = useSelector(\n    (state) => state.chat.selectedChatHistory\n  );\n\n  return !selectedChatHistory ? <ChatDefaultQuestion /> : <ChatMessage />;\n};\n\nexport default Dashboard;\n"],"names":["useUnauth","_ref","isRunning","onSubmit","inputValue","setInputValue","useState","_jsxs","e","preventDefault","trim","console","log","className","children","_jsx","PaperClipIcon","type","value","onChange","target","placeholder","concat","disabled","SendIcon","related_questions","ChatDefaultQuestion","setIsRunning","dispatch","useDispatch","userDetails","useSelector","state","auth","questions","chat","questionsList","useEffect","length","listQuestions","map","item","words","split","title","slice","join","description","ChatBrandLogo","full_name","info","i","onClick","async","onTopicSubmit","question","uuidv4","onQuestionSubmit","SendChatForm","formatDate","dateString","date","Date","isToday","toDateString","timePart","Intl","DateTimeFormat","hour","minute","format","dayMonthPart","day","month","DataLoader","Data","setTellUsMore","CloseIcon","r","ChatMessage","tellUsMore","selectedChatHistory","chatHistory","selectedChat","find","id","messages","created_at","answer","message","React","src","Avtar","alt","style","marginTop","marginBottom","loading","Markdown","components","code","props","node","rest","match","exec","SyntaxHighlighter","PreTag","String","replace","language","ThumbUp","ThumbDown","Clipboard","Retry","TellUsMore","Dashboard"],"sourceRoot":""}